function [y1] = TCU10_annS3_fx(x1)
%MYNEURALNETWORKFUNCTION neural network simulation function.
%
% Auto-generated by MATLAB, 03-Feb-2021 14:23:51.
%
% [y1] = myNeuralNetworkFunction(x1) takes these arguments:
%   x = Qx4 matrix, input #1
% and returns:
%   y = Qx1 matrix, output #1
% where Q is the number of samples.

%#ok<*RPMT0>

% ===== NEURAL NETWORK CONSTANTS =====

% Input 1
x1_step1.xoffset = [5.34;0;11.08;0];
x1_step1.gain = [0.1085776330076;0.0854883522120111;0.145454545454545;0.130650640188137];
x1_step1.ymin = -1;

% Layer 1
b1 = [-1.350220449540739498;2.3603046646907546169;-0.79662641253780219763;-0.87215472152337603085;-0.3208640029771481772;1.5270892160552089756;1.6528966424493569676;-4.5520491514657770438;0.84663763257161883669;-1.2168864578304210422;1.2406467963315939151;-0.83076241740307743555;-1.7045958067064439501;2.0829565053404905939;-2.4603131624629450691];
IW1_1 = [1.7707025758542302984 -0.43028626486916216054 -2.5602193054378838966 1.4333059634441440711;0.01661973801182284674 0.6323378264396338766 2.8941616851457521165 -2.2005970108441226252;-0.76177162204572346216 -1.1268806734251983759 -0.94028009424685532469 -0.82733556822768894445;0.012439240471522464149 -0.103750411577713475 -1.4582245110538838428 -1.3237248678582413941;-1.9004354773850402616 -1.4765749517080934972 1.6810164432363743359 2.8731673395821468731;-2.7334297729756786843 4.2499243447093837389 -2.4110325648805455145 -0.16731117462019434727;-7.2395683784384452508 3.3654434347985082709 2.7005341938992049045 -1.545977403999243327;-4.804104490673937633 -4.6277786840142036695 2.6574923419027811633 -0.3856413537698350491;-0.47056863794517306276 -0.56107845472076067761 1.5483774567384351872 0.91985663217380575496;-13.992238384013001351 -3.9629459840895422396 9.2334658422911068953 -0.49466105488815043101;-2.5077823841549506945 3.9930105657177157319 -2.199378526712918891 -0.7088131438329832168;-1.7661170151091500902 -1.2209927415640722259 0.66996762060190595545 2.5826914312976541055;4.8944311848684192157 -2.5802798950615644102 -2.8481944859027716888 1.3546683066475804225;-1.1104163060147100861 0.43673286933397215126 3.1790446144909072501 -1.5290886166382395839;-2.982313224105136662 -3.1640453271272397373 4.2544533551472563104 -1.5329329391091073287];

% Layer 2
b2 = 0.66023206077808627157;
LW2_1 = [-1.8475658653655377961 1.7610916318201099706 0.81728968163445625539 -1.8273496090275274106 -1.7634756354025442615 0.5894820084557257367 0.28578515290099903989 0.32555669028327416381 -1.8433427849871149018 0.11154308705809862223 -0.77741443850283908912 2.3092438853882897298 0.41905239745779715443 -3.3184901546095111335 -0.19115226673232849075];

% Output 1
y1_step1.ymin = -1;
y1_step1.gain = 0.0562863104043787;
y1_step1.xoffset = 1.12576;

% ===== SIMULATION ========

% Dimensions
Q = size(x1,1); % samples

% Input 1
x1 = x1';
xp1 = mapminmax_apply(x1,x1_step1);

% Layer 1
a1 = tansig_apply(repmat(b1,1,Q) + IW1_1*xp1);

% Layer 2
a2 = repmat(b2,1,Q) + LW2_1*a1;

% Output 1
y1 = mapminmax_reverse(a2,y1_step1);
y1 = y1';
end

% ===== MODULE FUNCTIONS ========

% Map Minimum and Maximum Input Processing Function
function y = mapminmax_apply(x,settings)
y = bsxfun(@minus,x,settings.xoffset);
y = bsxfun(@times,y,settings.gain);
y = bsxfun(@plus,y,settings.ymin);
end

% Sigmoid Symmetric Transfer Function
function a = tansig_apply(n,~)
a = 2 ./ (1 + exp(-2*n)) - 1;
end

% Map Minimum and Maximum Output Reverse-Processing Function
function x = mapminmax_reverse(y,settings)
x = bsxfun(@minus,y,settings.ymin);
x = bsxfun(@rdivide,x,settings.gain);
x = bsxfun(@plus,x,settings.xoffset);
end
