function [y1] = TCU10_annS2_fx(x1)
%MYNEURALNETWORKFUNCTION neural network simulation function.
%
% Auto-generated by MATLAB, 03-Feb-2021 14:22:28.
%
% [y1] = myNeuralNetworkFunction(x1) takes these arguments:
%   x = Qx2 matrix, input #1
% and returns:
%   y = Qx1 matrix, output #1
% where Q is the number of samples.

%#ok<*RPMT0>

% ===== NEURAL NETWORK CONSTANTS =====

% Input 1
x1_step1.xoffset = [11.08;0];
x1_step1.gain = [0.145454545454545;0.130650640188137];
x1_step1.ymin = -1;

% Layer 1
b1 = [-0.064048327519441367039;0.26250471422153454082;1.2195996361255829754;0.52587662649211874832;0.47273616133058188327;0.91032078856860088045;0.21188361978443179257;0.38727603093487628083;0.63724697796956564222;1.3835740498600965775;-0.55483026606889540577;-0.64043063876090433606;-0.80403835996060202262;-1.1557533071915546685;0.45950162757361923127];
IW1_1 = [-0.0078317861288515946278 -0.41488469726928478565;-0.47371159081679276026 -0.15953318074246344849;-0.80687276896661297432 1.3308734766402137151;2.818010582677524134 -1.9477438095035652932;4.5111331762521471589 -1.5720962379213589966;1.4491414318271451656 0.34284269286703139556;-0.29561223685618087664 2.0860318983564423156;-0.88636112147814360984 -0.88758614797166324184;2.5426167173996878645 0.81126634525822227673;1.7405772151425293881 3.0948501736859026501;-1.1251519304516466313 -0.17164805687242312704;0.65414645057156650676 2.8478779423797493386;0.51387074034614532714 -2.0696240987766651998;-1.9554749189932731923 -2.1321552448544176528;2.8392812609741415741 -1.0255277865008614047];

% Layer 2
b2 = 0.75046995308440589412;
LW2_1 = [-0.52067200257237100658 0.35299378608953668746 -1.3826827183523988651 0.928315387576657991 0.92644688675143360701 -1.2814017639047938779 -0.93571917210761956785 0.91013546509000042839 1.6326721712217211468 1.0612051362785943631 1.0319344898647768716 0.85281227315314811488 -1.5414860933250882358 1.4677257609270191185 -1.8533750690696924046];

% Output 1
y1_step1.ymin = -1;
y1_step1.gain = 0.0562863104043787;
y1_step1.xoffset = 1.12576;

% ===== SIMULATION ========

% Dimensions
Q = size(x1,1); % samples

% Input 1
x1 = x1';
xp1 = mapminmax_apply(x1,x1_step1);

% Layer 1
a1 = tansig_apply(repmat(b1,1,Q) + IW1_1*xp1);

% Layer 2
a2 = repmat(b2,1,Q) + LW2_1*a1;

% Output 1
y1 = mapminmax_reverse(a2,y1_step1);
y1 = y1';
end

% ===== MODULE FUNCTIONS ========

% Map Minimum and Maximum Input Processing Function
function y = mapminmax_apply(x,settings)
y = bsxfun(@minus,x,settings.xoffset);
y = bsxfun(@times,y,settings.gain);
y = bsxfun(@plus,y,settings.ymin);
end

% Sigmoid Symmetric Transfer Function
function a = tansig_apply(n,~)
a = 2 ./ (1 + exp(-2*n)) - 1;
end

% Map Minimum and Maximum Output Reverse-Processing Function
function x = mapminmax_reverse(y,settings)
x = bsxfun(@minus,y,settings.ymin);
x = bsxfun(@rdivide,x,settings.gain);
x = bsxfun(@plus,x,settings.xoffset);
end
