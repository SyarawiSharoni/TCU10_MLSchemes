function [y1] = TCU10_annS5_fx(x1)
%MYNEURALNETWORKFUNCTION neural network simulation function.
%
% Auto-generated by MATLAB, 03-Feb-2021 14:25:47.
%
% [y1] = myNeuralNetworkFunction(x1) takes these arguments:
%   x = Qx4 matrix, input #1
% and returns:
%   y = Qx1 matrix, output #1
% where Q is the number of samples.

%#ok<*RPMT0>

% ===== NEURAL NETWORK CONSTANTS =====

% Input 1
x1_step1.xoffset = [5.34;0;0;0];
x1_step1.gain = [0.1085776330076;0.0854883522120111;0.632911392405063;0.0175592625109745];
x1_step1.ymin = -1;

% Layer 1
b1 = [-0.63314113159254425955;0.55412950018837614508;-3.1630264516037445155;-0.07595418381977617206;0.22992974086297465752;0.97506335106667096913;-1.2854497036091796502;1.5174347668394942978;-4.5760128783890694493;2.5944963370084974663;-3.4764166765228119438;-0.42476562890525371152;1.3085668291648262507;0.2890935374214184117;-3.7790938852250173241];
IW1_1 = [-2.457334746210903198 -0.98150980594266346024 -0.34671518401163109457 1.1632615027208699221;2.1310920410434492922 0.67998337287431820375 0.2600232893139643453 -0.63979561140754626081;-4.1178753564510293117 -1.9507115026901895583 1.3537678917965834113 -0.48690750320418474395;0.25903784123541950812 1.1437509059202137784 -2.4286523419754746378 -2.3257017490745508503;0.64206283086388160619 -1.0250813698596585866 -0.63114998806490929528 1.3492339289956050141;1.6216216269742558254 -0.092998224373207247218 -0.32345482571785355574 -0.62151347198006512418;1.382549065942141775 -1.1712375900542904006 -1.8995470131070872899 0.72504043597106659913;0.59738166535397829726 3.7596504773725718529 0.99421928779714718871 -1.4777098141873383774;-2.6789716478888498941 -7.2642014815223436841 2.3219675009072622274 2.3975736582366993233;3.9926792331460148056 2.7016771253989069201 0.2227911050844978702 -0.22385442412982956006;2.7513927906226807174 -5.1587075736361809319 -0.36873750030218227502 -0.018231845700857424175;-0.20695316546548495062 -1.795235037979979964 2.2971432252998891244 2.3059204678503668617;0.57527690262349151507 3.2559508940488064432 1.0630612051841394905 -1.8000721547926614718;-2.1963465273781088705 -0.036427433294579349143 1.7613114051928853154 -0.86317863538792771738;-5.637754423241990942 -4.1195896712552499963 -0.56653501448030729737 0.60815287808480644749];

% Layer 2
b2 = 0.789915499570477464;
LW2_1 = [1.7190313664720779929 2.5353402122266763818 -0.66571450632003126291 0.74833662637461451084 -1.8380845445754887546 -1.1259723167451649584 -0.69440894688621002118 1.2357003672600350708 -0.17330800238234225774 -1.6954116587898249158 -0.15774548904102367319 0.91335509797358249706 -1.8627162154872975997 -0.92512735161235537529 -0.77384037788259452118];

% Output 1
y1_step1.ymin = -1;
y1_step1.gain = 0.0562863104043787;
y1_step1.xoffset = 1.12576;

% ===== SIMULATION ========

% Dimensions
Q = size(x1,1); % samples

% Input 1
x1 = x1';
xp1 = mapminmax_apply(x1,x1_step1);

% Layer 1
a1 = tansig_apply(repmat(b1,1,Q) + IW1_1*xp1);

% Layer 2
a2 = repmat(b2,1,Q) + LW2_1*a1;

% Output 1
y1 = mapminmax_reverse(a2,y1_step1);
y1 = y1';
end

% ===== MODULE FUNCTIONS ========

% Map Minimum and Maximum Input Processing Function
function y = mapminmax_apply(x,settings)
y = bsxfun(@minus,x,settings.xoffset);
y = bsxfun(@times,y,settings.gain);
y = bsxfun(@plus,y,settings.ymin);
end

% Sigmoid Symmetric Transfer Function
function a = tansig_apply(n,~)
a = 2 ./ (1 + exp(-2*n)) - 1;
end

% Map Minimum and Maximum Output Reverse-Processing Function
function x = mapminmax_reverse(y,settings)
x = bsxfun(@minus,y,settings.ymin);
x = bsxfun(@rdivide,x,settings.gain);
x = bsxfun(@plus,x,settings.xoffset);
end
